There are 15 storage boxes having following weights in kilogram.Write a program that arrange the boxes from lighest to heaviest using Quick sort.

35	20	10	25	30	35	15	07	16	15	45	50	14	22	33
a.	Take last ement as pivot
b.	Take middle element as pivot
Code:
#include <iostream>

using namespace std;

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Function to partition the array and return the index of the pivot
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Choose the last element as the pivot
    int i = (low - 1);     // Index of the smaller element

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// Quick Sort function with last element as pivot
void quickSortLastPivot(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        // Recursively sort elements before and after partition
        quickSortLastPivot(arr, low, pi - 1);
        quickSortLastPivot(arr, pi + 1, high);
    }
}

// Function to choose the middle element as pivot
int middlePivot(int arr[], int low, int high) {
    int middle = low + (high - low) / 2;
    int a = arr[low];
    int b = arr[middle];
    int c = arr[high];
    
    if ((a <= b && b <= c) || (c <= b && b <= a))
        return middle;
    if ((b <= a && a <= c) || (c <= a && a <= b))
        return low;
    return high;
}

// Quick Sort function with middle element as pivot
void quickSortMiddlePivot(int arr[], int low, int high) {
    if (low < high) {
        int pivotIndex = middlePivot(arr, low, high);
        swap(arr[pivotIndex], arr[high]);
        int pi = partition(arr, low, high);

        // Recursively sort elements before and after partition
        quickSortMiddlePivot(arr, low, pi - 1);
        quickSortMiddlePivot(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {35, 20, 10, 25, 30, 35, 15, 7, 16, 15, 45, 50, 14, 22, 33};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original Array: ";
    printArray(arr, size);

    // Sort with last element as pivot
    quickSortLastPivot(arr, 0, size - 1);
    cout << "Sorted Array (Last Pivot): ";
    printArray(arr, size);

    // Reset the array
    int arr2[] = {35, 20, 10, 25, 30, 35, 15, 7, 16, 15, 45, 50, 14, 22, 33};

    // Sort with middle element as pivot
    quickSortMiddlePivot(arr2, 0, size - 1);
    cout << "Sorted Array (Middle Pivot): ";
    printArray(arr2, size);

    return 0;
}
