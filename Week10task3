Consider exercise 1.Write a function that deletes the element from binary search tree.
Node* deleteNode(Node* root, int key) {
    if (root == nullptr) {
        return root;
    }

    if (key < root->key) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->key) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        // Node with two children
        Node* temp = findMin(root->right);

        // Copy the inorder successor's content to this node
        root->key = temp->key;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}
for (int i = 0; i < numKeys; ++i) {
        setConsoleColor(12); // Red color
        cout << "Deleting node with key " << keys[i] << endl;
        resetConsoleColor();

        root = deleteNode(root, keys[i]);

        setConsoleColor(11); // Cyan color
        cout << "Inorder Traversal after Deletion: ";
        inorderTraversal(root);
        cout << endl;
    }
